name: CI and Sonar Analysis

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-and-analyze:
    runs-on: ubuntu-latest

    steps:
      # 1. Check out the code from your repo
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Start SonarQube container (no security) and wait for "UP"
      - name: Start SonarQube container
        run: |
          # Levanta SonarQube
          docker run -d --name sonar \
            -p 9000:9000 \
            -e SONAR_SECURITY_REALM=none \
            -e SONAR_SECURITY_STRATEGY=none \
            sonarqube:latest

          echo "Waiting for SonarQube to be ready..."

          # Instala 'jq' para parsear JSON
          sudo apt-get update -y
          sudo apt-get install -y jq

          # Bucle de hasta 10 intentos, 15s cada uno (~2.5 minutos)
          for i in {1..10}; do
            STATUS=$(curl -s http://localhost:9000/api/system/status | jq -r .status || true)
            echo "SonarQube status: $STATUS"
            if [ "$STATUS" = "UP" ]; then
              echo "SonarQube is up!"
              break
            fi
            echo "SonarQube not ready... attempt $i"
            sleep 15
          done

      # 3. Setup .NET (elige tu versión)
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      # 4. Instalar dotnet-sonarscanner globalmente
      - name: Install SonarScanner for .NET
        run: |
          dotnet tool install --global dotnet-sonarscanner --version 9.0.2
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      # 5. Iniciar análisis con SonarScanner (SIN credenciales, seguridad desactivada)
      - name: SonarScanner Begin
        run: |
          dotnet sonarscanner begin \
            /k:"csharp" \
            /d:sonar.host.url="http://localhost:9000" \
            /d:sonar.cs.opencover.reportsPaths="tests/UnitTestingBasics.Tests/**/coverage.opencover.xml"

      # 6. Compilar el proyecto
      - name: Build
        run: dotnet build unit-testing-basics.sln --configuration Debug

      # 7. Ejecutar las pruebas con cobertura
      - name: Test with Coverage
        run: |
          dotnet test unit-testing-basics.sln \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      # 8. Finalizar análisis y subir a SonarQube (SIN credenciales)
      - name: SonarScanner End
        run: dotnet sonarscanner end
